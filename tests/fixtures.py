"""Pytest fixtures."""


import logging
import os
import shutil
from collections.abc import Iterator

import pytest

#: Base path to artifacts generated by the tests.
ARTIFACTS_PATH = os.path.join(os.path.normpath(os.path.dirname(__file__)), ".artifacts")


@pytest.fixture()
def adir(request: pytest.FixtureRequest) -> Iterator[str]:
    """A fixture that generates the specified folder in the artifacts directory, and provides it
    as a path to the tests.

    The example below shows an example on how to use the fixture and its parameters:

    .. code-block:: python

        @pytest.mark.parametrize("adir", ["images"], indirect=True)
        def test_example(adir: str):
            pass

    :param request: The Pytest request object.
    :return: The sample."""
    # Fetch parameters from request.
    dir_name: str = request.param

    if not os.path.exists(new_dir := os.path.join(ARTIFACTS_PATH, dir_name)):
        os.makedirs(new_dir)

    yield new_dir


@pytest.fixture(autouse=True, scope="session")
def logger(request: pytest.FixtureRequest) -> Iterator[logging.Logger]:
    """Prepares the logger for the package and other functionality for testing.

    :param request: The Pytest request object.
    :return: The logger used within the package."""
    # pylint: disable=unused-argument

    # If the artifacts path exists at the beginning of the session, then delete it entirely, and create it anew.
    if os.path.exists(ARTIFACTS_PATH):
        shutil.rmtree(ARTIFACTS_PATH)
    os.makedirs(ARTIFACTS_PATH)

    # Disable matplotlib debug messages about fonts, as they pollute the reports.
    logging.getLogger("matplotlib.font_manager").setLevel(logging.INFO)

    # Get package logger.
    logger_obj = logging.getLogger("python-signal-edges-logger")
    # Check if already initialized, in which case do nothing.
    if not getattr(logger_obj, "init", False):
        # Set logger level.
        logger_obj.setLevel(logging.DEBUG)
        # Configure stream to file and with specific formatting.
        tests_log_path = os.path.join(ARTIFACTS_PATH, "tests.log")
        stream_handler = logging.FileHandler(tests_log_path, mode="w+")
        stream_handler.setFormatter(
            logging.Formatter(
                r"[%(asctime)s.%(msecs)03d] [%(levelname)5.5s] [%(module)s:%(lineno)d] %(message)s",
                datefmt=r"%d/%m/%Y %H:%M:%S",
            )
        )
        logger_obj.addHandler(stream_handler)
        # Initialize logger for the package.
        setattr(logger_obj, "init", True)

    yield logger_obj
